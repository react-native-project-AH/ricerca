{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Home\\\\Desktop\\\\ricerca\\\\components\\\\search\\\\index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Formik, Field, Form } from 'formik';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nfunction Search(props) {\n  var _this = this;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  var _useSpeechRecognition = useSpeechRecognition(),\n      transcript = _useSpeechRecognition.transcript,\n      resetTranscript = _useSpeechRecognition.resetTranscript;\n\n  useEffect(function _callee() {\n    var cx, gcse, s;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cx = '4050613ba5d231066';\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(document.createElement('script'));\n\n          case 3:\n            gcse = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap('text/javascript');\n\n          case 6:\n            gcse.type = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(true);\n\n          case 9:\n            gcse.async = _context.sent;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap('https://cse.google.com/cse.js?cx=');\n\n          case 12:\n            _context.t0 = _context.sent;\n            _context.t1 = cx;\n            gcse.src = _context.t0 + _context.t1;\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(document.getElementsByTagName('script')[0]);\n\n          case 17:\n            s = _context.sent;\n            s.parentNode.insertBefore(gcse, s);\n            console.log(document.querySelector('.gsc-search-box'));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(\"div\", {\n    className: \"gcse-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 1\n    }\n  }), React.createElement(Formik, {\n    initialValues: {\n      search: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      console.log(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, function (formikProps) {\n    return React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"SEARCH\",\n      onChangeText: formikProps.handleChange(\"search\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }), React.createElement(\"button\", {\n      onClick: SpeechRecognition.startListening,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 26\n      }\n    }, \"Start\"), React.createElement(Button, {\n      title: \"submit\",\n      onPress: formikProps.handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }));\n  }), React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, React.createElement(\"button\", {\n    onClick: SpeechRecognition.stopListening,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Stop\"), React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Reset\")));\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/Home/Desktop/ricerca/components/search/index.js"],"names":["React","useState","useEffect","Formik","Field","Form","SpeechRecognition","useSpeechRecognition","Search","props","recording","setRecording","transcript","resetTranscript","cx","document","createElement","gcse","type","async","src","getElementsByTagName","s","parentNode","insertBefore","console","log","querySelector","browserSupportsSpeechRecognition","search","values","formikProps","handleChange","startListening","handleSubmit","stopListening"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, StyleSheet, View, TextInput, Button } from 'react-native';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\n// import { Audio } from 'expo-av';\r\n// AIzaSyAvcNX1GBJilOOjrs-Ch-CG9VX8yG-nRDk\r\n\r\nfunction Search(props) {\r\n    const [recording, setRecording] = React.useState();    \r\n    const { transcript, resetTranscript } = useSpeechRecognition()\r\n\r\n    useEffect(async()=>{\r\n              var cx = '4050613ba5d231066';\r\n              var gcse =await document.createElement('script');\r\n              gcse.type = await'text/javascript';\r\n              gcse.async = await true;\r\n              gcse.src = await 'https://cse.google.com/cse.js?cx=' + cx;\r\n              var s =await document.getElementsByTagName('script')[0];\r\n              s.parentNode.insertBefore(gcse, s);\r\n              console.log(document.querySelector('.gsc-search-box'))\r\n\r\n    },[])\r\n    // const startRecording = async ()=> {\r\n    //     try {\r\n    //         console.log('Requesting permissions..');\r\n    //         await Audio.requestPermissionsAsync()\r\n    //         await Audio.setAudioModeAsync({\r\n    //             allowsRecordingIOS: true,\r\n    //             playsInSilentModeIOS: true,\r\n    //       }); \r\n    //       console.log('Starting recording..');\r\n    //       const recording = new Audio.Recording();\r\n    //       await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);\r\n    //       await recording.startAsync(); \r\n    //       setRecording(recording);\r\n    //       console.log('Recording started');\r\n    //     } catch (err) {\r\n    //         console.error('Failed to start recording', err);\r\n    //     }\r\n    // }\r\n    \r\n    // async function stopRecording() {\r\n    //     console.log('Stopping recording..');\r\n    //     setRecording(undefined);\r\n    //     await recording.stopAndUnloadAsync();\r\n    //     const uri = recording.getURI(); \r\n    //     console.log('Recording stopped and stored at', uri);\r\n    // }\r\n    \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n\r\n        <View>\r\n<div className=\"gcse-search\"></div>\r\n            <Formik initialValues={{ search: \"\" }}\r\n                onSubmit={(values) => {\r\n                    console.log(values)\r\n                }}\r\n                >\r\n                {formikProps => (\r\n                    <Form>\r\n                        <TextInput\r\n                            placeholder=\"SEARCH\"\r\n                            onChangeText={formikProps.handleChange(\"search\")}\r\n                        />\r\n                         <button onClick={SpeechRecognition.startListening}>Start</button>\r\n                        <Button title=\"submit\" onPress={formikProps.handleSubmit} />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n            <div>\r\n               \r\n                <button onClick={SpeechRecognition.stopListening}>Stop</button>\r\n                <button onClick={resetTranscript}>Reset</button>\r\n            </div>\r\n            {/* <Button\r\n        title={recording ? 'Stop Recording' : 'Start Recording'}\r\n        onPress={recording ? stopRecording : startRecording}\r\n      /> */}\r\n        </View>\r\n    )\r\n}\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}