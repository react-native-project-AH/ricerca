{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Home\\\\Desktop\\\\ricerca\\\\components\\\\search\\\\index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Formik, Field, Form } from 'formik';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { Audio } from 'expo-av';\n\nfunction Search(props) {\n  var _this = this;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  var _useSpeechRecognition = useSpeechRecognition(),\n      transcript = _useSpeechRecognition.transcript,\n      resetTranscript = _useSpeechRecognition.resetTranscript;\n\n  var startRecording = function startRecording() {\n    var _recording;\n\n    return _regeneratorRuntime.async(function startRecording$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('Requesting permissions..');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Audio.requestPermissionsAsync());\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n              allowsRecordingIOS: true,\n              playsInSilentModeIOS: true\n            }));\n\n          case 6:\n            console.log('Starting recording..');\n            _recording = new Audio.Recording();\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(_recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY));\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(_recording.startAsync());\n\n          case 12:\n            setRecording(_recording);\n            console.log('Recording started');\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Failed to start recording', _context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  function stopRecording() {\n    var uri;\n    return _regeneratorRuntime.async(function stopRecording$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('Stopping recording..');\n            setRecording(undefined);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(recording.stopAndUnloadAsync());\n\n          case 4:\n            uri = recording.getURI();\n            console.log('Recording stopped and stored at', uri);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      search: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      console.log(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, function (formikProps) {\n    return React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"SEARCH\",\n      onChangeText: formikProps.handleChange(\"search\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }), React.createElement(\"button\", {\n      onClick: SpeechRecognition.startListening,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 26\n      }\n    }, \"Start\"), React.createElement(Button, {\n      title: \"submit\",\n      onPress: formikProps.handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }));\n  }), React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, React.createElement(\"button\", {\n    onClick: SpeechRecognition.stopListening,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"Stop\"), React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Reset\")), React.createElement(Button, {\n    title: recording ? 'Stop Recording' : 'Start Recording',\n    onPress: recording ? stopRecording : startRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/Home/Desktop/ricerca/components/search/index.js"],"names":["React","useState","useEffect","Formik","Field","Form","SpeechRecognition","useSpeechRecognition","Audio","Search","props","recording","setRecording","transcript","resetTranscript","startRecording","console","log","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","Recording","prepareToRecordAsync","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","startAsync","error","stopRecording","undefined","stopAndUnloadAsync","uri","getURI","browserSupportsSpeechRecognition","search","values","formikProps","handleChange","startListening","handleSubmit","stopListening"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, StyleSheet, View, TextInput, Button } from 'react-native';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { Audio } from 'expo-av';\r\n\r\n\r\nfunction Search(props) {\r\n    const [recording, setRecording] = React.useState();    \r\n    const { transcript, resetTranscript } = useSpeechRecognition()\r\n    const startRecording = async ()=> {\r\n        try {\r\n            console.log('Requesting permissions..');\r\n            await Audio.requestPermissionsAsync()\r\n            await Audio.setAudioModeAsync({\r\n                allowsRecordingIOS: true,\r\n                playsInSilentModeIOS: true,\r\n          }); \r\n          console.log('Starting recording..');\r\n          const recording = new Audio.Recording();\r\n          await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);\r\n          await recording.startAsync(); \r\n          setRecording(recording);\r\n          console.log('Recording started');\r\n        } catch (err) {\r\n            console.error('Failed to start recording', err);\r\n        }\r\n    }\r\n    \r\n    async function stopRecording() {\r\n        console.log('Stopping recording..');\r\n        setRecording(undefined);\r\n        await recording.stopAndUnloadAsync();\r\n        const uri = recording.getURI(); \r\n        console.log('Recording stopped and stored at', uri);\r\n    }\r\n    \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n\r\n        <View>\r\n            <Formik initialValues={{ search: \"\" }}\r\n                onSubmit={(values) => {\r\n                    console.log(values)\r\n                }}\r\n                >\r\n                {formikProps => (\r\n                    <Form>\r\n                        <TextInput\r\n                            placeholder=\"SEARCH\"\r\n                            onChangeText={formikProps.handleChange(\"search\")}\r\n                        />\r\n                         <button onClick={SpeechRecognition.startListening}>Start</button>\r\n                        <Button title=\"submit\" onPress={formikProps.handleSubmit} />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n            <div>\r\n               \r\n                <button onClick={SpeechRecognition.stopListening}>Stop</button>\r\n                <button onClick={resetTranscript}>Reset</button>\r\n            </div>\r\n            <Button\r\n        title={recording ? 'Stop Recording' : 'Start Recording'}\r\n        onPress={recording ? stopRecording : startRecording}\r\n      />\r\n        </View>\r\n    )\r\n}\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}